[{"title":"工具收集","url":"/2023/03/16/2023-03-16/","content":"\n从拥有自己的第一台电脑开始已经过了 11 年了，经历了 Windows7 8 10 11 这么多版本的更新，也一直在使用一些工具。\n有些工具自己就是一个平台，有着与其对应的使用习惯和插件或应用市场。\n\n## Windows\n\n| 名称             | 描述                     |\n| ---------------- | ------------------------ |\n| Chrome           | 浏览器老大               |\n| VSCode           | 吃饭的家伙               |\n| NeoVim           | 解放鼠标                 |\n| Ditto            | 剪切板管理               |\n| Everything       | 强大的搜索，发现一切     |\n| Zeal             | 文档工具                 |\n| Draw.io          | 画图工具，可以制作脑图   |\n| Powertoys        | 微软出品，使用工具集合   |\n| Windows Terminal | 好用的终端工具，微软出品 |\n| WSL              | 离不开了                 |\n| Insomnia         | 接口测试                 |\n| SumatraPDF       | 轻量 pdf 阅读器          |\n| Notepad2-mod     | nodepad 的替代           |\n\n## Chrome 插件\n\nChrome 已经变成事实意义上的浏览器标准了。服务端也有源自 ChromeV8 的 Node.js，客户端还有 Electron。\n\n| 名称               | 描述                          |\n| ------------------ | ----------------------------- |\n| Proxy SwitchyOmega | 科学上网必备                  |\n| Vimium             | 使用 Vim 快捷键导航，解放鼠标 |\n| Vue.js devtools    | 吃饭的家伙+1                  |\n| 沙拉查词           | 换了不知道多少个了            |\n| Tampermonkey       | 油猴插件                      |\n| FeHelper           | 前端开发工具合集              |\n| Bitwarden          | 密码保管                      |\n\n广告插件经常换，一个没用就装两个，总有一个有用\n","tags":["工具"]},{"title":"页面加载优化","url":"/2022/09/01/2022-09-01/","content":"\n不同的 tab 页使用的还是同一个组件，但是在 tab 点击到列表完全展示，差不多有 1s~2s 等待时间。原因可能是组件加载缓慢或者网络请求慢\n\n### 组件加载\n\n使用 Vue devtool 可以检查组件的加载时间\n\n![](/img/20220901101039.png)\n\nlogContent 是列表组件容器，卡顿的表现也主要是由于该组件中的列表上时间没有渲染到页面，从而造成了视觉上的卡顿。从上图可以看出这个组件并没有耗费太长的时间。\n\n### 接口请求\n\n因为页面上有许多组件都可以和列表有交互,所以将数据的请求放在 Vuex 的 actions 中，可以更方便的在不同的组件中共享状态和操作。\n整个列表加载是由三个接口构成\n\n以下接口均为最近 5 分钟的查询结果 从上到下依次是三个接口的加载时间\n切换第一个 tab 时\n\n![](/img/20220901111414.png)\n\n![](/img/20220901111509.png)\n\n![](/img/20220901111613.png)\n\n三次接口查询分别耗时 613ms 607ms 39ms\n切换第二个 tab 时\n\n![](/img/20220901111430.png)\n\n![](/img/20220901111547.png)\n\n![](/img/20220901111630.png)\n\n三个接口总共耗时 802ms 831ms 790ms\n\n访问上海的数据中心时平均耗时接近 1s，接近肉眼观察的页面加载时间\n\n### 页面体验优化\n\n加载动画在列表接口请求结束后就消失了，列表加载卡顿的原因也主要来自于 loading 动画结束之后到列表加载出来后的这一空白时间。loading 动画应该在第一个接口之前开始，在最后一个接口之后结束。\n通过手动延长加载时间后，发现 loading 动画消失后到页面列表加载出来的这段时间，也是由 loading 组件占据了列表的位置，只是没有显示加载动画。\n\n![](/img/20220901114922.png)\n\nloading 状态由 noData 和 isLoadding 两个变量控制，当列表请求结束后，便设置了 noData 变量，而 isLoadding 变量还是 true，从而导致了动画结束后的空白时间。\n至此，问题也解决了，去掉组件的 show-img 属性，将 setListLoadding 提前，便可以使动画正常结束。\n\n### 组件加载顺序\n\n在调试的过程中发现，初次进入原始日志页面的时候，表头的数据加载晚于列表的数据的加载。在 Vue 中，子组件的 created 生命周期先于父组件的 created 生命周期完成。获取日志的方法在子组件 searchbox 中调用，而获取表头的接口则在父组件中调用。因此，获取表头的方法永远晚于获取日志的接口，从而导致了表头的闪烁。这个问题可以通过将列表数据的请求放在父组件中来解决\n","tags":["Vue.js"]},{"title":"NAS折腾（二）内网穿透","url":"/2022/08/15/2022-08-15/","content":"\n信息流之类的 app 一旦开始就很难停下来，例如 twitter、微博、bilibili。每天的\n闲暇时间都在不同的 app 之间切换。有没有能够聚合所有信息流的方法呢？想起之前使用的\nrss，免费的 inoreader 和 feedly 都有不同的限制，于是使用了自架 rss。\n\n## 内网穿透\n\n### 花生壳 PHTunnel\n\n内网穿透首先需要的便是公网 ip，家里的网络是中国移动的免费宽带，而小气的移动\n宽带根本就没有多少公网 ip，就得想想其他方法。有没有不需要公网 ip 也可以进行内\n网穿透的方法？在找的过程中发现花生壳 PHTunnel 就是这样的工具，而路由器自带花\n生壳插件，具体的使用方法如下\n\n1. 开启路由器自带的花生壳插件用来生成 sn 码\n2. 使用生成的 sn 码登录花生壳管理平台\n3. 花 6 元钱开启 HTTPS 映射服务\n4. 添加内网映射\n\n### zerotier\n\n1. 注册 zerotier 账号\n2. 在 zerotier 上创建网络\n3. nas/手机/电脑下载客户端\n4. ssh 到 nas\n5. 执行 zerotier network 命令\n6. 其他客户端操作类似，加入创建的网络\n\n## 加内存\n\n使用 docker 至少需要 8g 内存，而自带的只有 2g，强制开启 docker 的话肯定会卡死，闲鱼\n购买了一根 8g 的 ddr3l 的内存，这样再也不怕内存不足了\n\n## 开启 docker\n\n## 部署 tts\n\n使用 docker 部署[tts](https://ttrss.henry.wang/zh/#%E5%85%B3%E4%BA%8E)\n\n## 从 inoreader 迁移\n\n从 inoreader 平台导出 opml 文件\n\n## 手机使用\n\ntts 提供了官方安卓客户端，使用体验良好，ios 可以使用 reeder\n","tags":["硬件"]},{"title":"在VSCode中使用Neovim","url":"/2022/08/11/2022-08-11/","content":"\n在 VSCode 中配置 NeoVim 是参考的 Youtube 上的一个视频，那段视频也配有博客，后来，博客作者开发了 lunarvim，那篇博客也被删除了，视频和代码还在，现在自己记录一下配置过程\n\n## VSCode 配置\n\n### 插件\n\nVSCode Neovim\nWhich Key\n\n## Neovim 配置\n","tags":["VSCode","Vim"]},{"title":"如何用 CSS 实现一个三角形","url":"/2022/05/18/2020-05-26/","content":"\n当涉及到网页设计和CSS技巧时，有时候我们需要在页面中添加一些特殊形状，比如三角形。本文将介绍如何使用CSS来绘制三角形，为你展示两种常见的方法。\n\n### 使用CSS绘制三角形的方法\n\n在网页设计中，有时我们需要创建各种形状的图形，其中三角形是最常见的形状之一。下面我们将介绍两种使用CSS绘制三角形的方法。\n\n#### 方法一：使用`border`属性\n\n这种方法通过设置元素的`border`属性来创建三角形。下面是一个简单的例子：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n.triangle {\n  width: 0;\n  height: 0;\n  border-left: 50px solid transparent;\n  border-right: 50px solid transparent;\n  border-bottom: 100px solid red;\n}\n</style>\n</head>\n<body>\n\n<div class=\"triangle\"></div>\n\n</body>\n</html>\n```\n\n在这个例子中，我们创建了一个向下的红色三角形。你可以根据需要调整`border`属性的值来改变三角形的大小和方向。\n\n#### 方法二：使用伪元素\n\n另一种常见的方法是使用伪元素。下面是一个例子：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<style>\n.triangle {\n  width: 0;\n  height: 0;\n  position: relative;\n}\n\n.triangle::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 100px solid red;\n  border-left: 50px solid transparent;\n  border-right: 50px solid transparent;\n}\n</style>\n</head>\n<body>\n\n<div class=\"triangle\"></div>\n\n</body>\n</html>\n```\n\n同样，这将创建一个向下的红色三角形。你也可以调整`border`属性的值来改变三角形的大小和方向。\n\n### 结论\n\n在这篇文章中，我们讨论了两种使用CSS绘制三角形的方法。通过这些简单的技巧，你可以轻松创建各种形状的三角形，使你的网页设计更加多样化和有趣。希望本文能帮助你更好地理解如何利用CSS来创建三角形。","tags":["面试"]},{"title":"cookie、localStorage与sessionStorage的区别","url":"/2022/05/18/2020-06-06/","content":"\nCookie、localStorage、sessionStorage 都是 Web 开发中常用的存储数据的方式，它们之间存在一些关键的区别。\n\n| 属性     | Cookie                                     | localStorage                               | sessionStorage                   |\n| -------- | ------------------------------------------ | ------------------------------------------ | -------------------------------- |\n| 存储位置 | 浏览器端                                   | 浏览器端                                   | 浏览器端                         |\n| 数据大小 | 4KB                                        | 5MB                                        | 5MB                              |\n| 作用域   | 同源                                       | 同源                                       | 同源                             |\n| 生命周期 | 浏览器关闭后失效                           | 浏览器关闭后失效                           | 当前会话结束后失效               |\n| 使用场景 | 用于存储少量数据，例如用户偏好、登录状态等 | 用于存储大量数据，例如游戏进度、浏览记录等 | 用于存储临时数据，例如表单数据等 |\n\n## Cookie\n\nCookie 是存储在浏览器端的一小段文本数据，由服务器生成，并在每次请求时发送给浏览器。Cookie 的数据大小限制为 4KB，作用域为同源，生命周期由服务器设置。Cookie 通常用于存储少量数据，例如用户偏好、登录状态等。\n\n## localStorage\n\nlocalStorage 是 HTML5 中提供的一种持久化存储方式，可以存储任意大小的数据，作用域为同源，生命周期为浏览器关闭后失效。localStorage 通常用于存储大量数据，例如游戏进度、浏览记录等。\n\n## sessionStorage\n\nsessionStorage 是 HTML5 中提供的一种会话存储方式，可以存储任意大小的数据，作用域为同源，生命周期为当前会话结束后失效。sessionStorage 通常用于存储临时数据，例如表单数据等。\n\n## 总结\n\nCookie、localStorage、sessionStorage 各有优缺点，具体选择哪种存储方式取决于实际需求。Cookie 适用于存储少量数据，localStorage 适用于存储大量数据，sessionStorage 适用于存储临时数据。\n","tags":["面试"]},{"title":"变于不变","url":"/2022/05/18/2022-05-18/","tags":["思考"]},{"title":"NAS折腾（一）威联通(Qnap)安装Mariadb","url":"/2022/03/08/2022-03-08/","content":"\n以前开发的时候总是用同一台机器开启数据库,机器休眠或者关闭之后数据库就不能链接了,\n\n<!-- more -->\n\n想着有没有办法可以在本地环境中跑一个永不关机的数据库进程,正好手头有一台之前买的威联通的 NAS,是不是可以在 NAS 上安装一个数据库,这样就不用担心关机关闭的问题了.以下是自己记下的操作步骤,希望有需要的可以参考一下\n\n1. 应用商店安装 mariadb\n2. 开启威廉通 ssh\n3. Ssh 登陆威廉通 用户 admin 密码就是网页版登陆威廉通的密码\n4. 修改 mariadb 配置 /etc/config/my.cnf sock 链接的地址改为安装好 mariadb 后弹框中的地址\n5. 开启 mariadb 远程访问\n6. /share/CACHEDEV1_DATA/.qpkg/MariaDB1/bin 目录下执行 ./mysql -u root -p\n7. GRANT ALL PRIVILEGES ON _._ TO 'root'@'%'IDENTIFIED BY '123456' WITH GRANT OPTION; 也可以只允许部分地址链接 192.168.111.%\n8. flush privileges; 刷新使上面的修改生效\n9. Laravel :Syntax error or access violation: 1071 Specified key was too long;\n10. 在 AppServiceProvider 中添加 Schema::defaultStringLength(191);\n","tags":["硬件"]},{"title":"使用miniconda管理python版本","url":"/2022/03/07/2022-03-07/","content":"\n在使用Node.js时候,我们可以使用nvm管理不同的Node.js版本.在维护老项目的时候,可以将Node.js切换到较低的版本;当需要新的JS特性的时候,可以将JS切换到较新的版本.\n\n在使用python的时候,并没有像nvm这样的方便切换不同python版本的工具.虽然有virtualenv这样的虚拟环境管理软件,但是这类软件只是为当前python环境添加了一些特定的软件包,类似于node_modules,并不能切换python的版本,直到我发现了miniconda.\n\nanaconda可以用来管理不同的Python,Node.js等等，而miniconda是anaconda的最小安装包，只包含必要的库。\n\n## 安装\n从[官网](https://docs.conda.io/en/latest/miniconda.html)下载自己电脑对应的安装包.在windows上，可以使用WSL作为日常的开发环境.\n```bash\ncurl -sL \\\n  \"https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh\" > \\\n  \"Miniconda3.sh\"\n```\n下载好之后,输入\n```bash\nbash Miniconda3.sh\n```\n依据提示安装\n\n安装好之后重启终端，在终端的提示符上可以看到miniconda为我们默认激活了名为base的默认版本\n![](/img/1646646662326.png)\n\n## Python版本切换\n\n### 安装其他版本的Python\n```bash\nconda create -n py36 python=3.6\n```\n3.6是你想要安装的Python版本号，-n参数用来设置版本的名字\n\n### 激活特定版本\n```bash\nconda activate py36\n```\n\n### 停用当前激活的Python版本\n```bash\nconda deactivate\n```\n\n更多使用方法请参考[官网文档](https://docs.conda.io/en/latest/miniconda.html)\n","tags":["Python"]},{"title":"在windows下使用WSL中的git","url":"/2022/02/15/2022-02-15/","content":"\n在 windows 上安装 git 后，在安装目录会有一个 mingw64 的文件夹，这个文件夹里面放着 git 运行的依赖环境。\n在维基百科上，是这样解释 mingw64 的:\n\n    MinGW-w64是自由及开放源代码软件开发环境，用于创建Microsoft Windows应用程序。从\n    2005–2008从MinGW(Minimalist GNU for Windows)分支出来。\n\n    MinGW-w64包括对GCC、GNU Binutils的Windows版本的移植（汇编器、链接器、库文件管理器），\n    一套自由可分发的Windows特定的头文件与静态导入库以使用Windows API，一个Windows本地版本\n    的GNU的调试器，以及其它多种工具。\n\n    MinGW-w64可运行于本地Microsoft Windows平台，\"cross-native\"在MSYS2或Cygwin。\n    MinGW-w64能生成32或64位可执行程序，运行于i686-w64-mingw32或x86_64-w64-mingw32\n    目标平台。\n\nwindows 下的 git 运行依赖于 mingw64，而 mingw64 实际上是 GNU 项目下一些软件环境的集合。而现在有了 WSL（Windows Subsystem for Linux），则可以在 windws 下使用\n不依赖于 mingw64 的原生 git\n\n首先需要做的是安装 WSL，网上已经有很多教程，这里就不再赘述。这些教程里一般会让你配置好开发环境，包括 git 这些。\n\n接下来的操作都需要在Windows这边来进行。先下载[wslgit.zip](https://github.com/andy-5/wslgit/releases/tag/v1.2.0)，解压后如下图所示：\n![](/img/wslgit_before.png)\n右键instal.bat，使用管理员权限运行，得到bin文件夹：\n![](/img/wslgit_after.png)\n最后需要做的就是将bin目录添加到环境变量，注销或重启电脑，这样你就可以愉快的使用原生git","tags":["工具"]},{"title":"Vue 3 + Vite + Testing Library","url":"/2021/11/25/2021-11-25/","content":"\n## 关于组件测试\n\nVue 有官方的组件测试库[Vue Test Utils](https://vue-test-utils.vuejs.org/),这是一个比较偏底层的组件测试库,\n如果对其不熟悉的话,官方建议是使用[Vue Testing Library](https://testing-library.com/docs/vue-testing-library/intro),\n它是对 Vue Test Utils 的抽象\n\n## 项目添加组件测试\n\n1. 使用 vite 创建 Vue 应用\n\n```sh\nyarn create vite <project_name> --template vue\n```\n\n2. 安装依赖\n\ntesting library 目前只针对 Vue2 进行了适配,如果需要在 Vue3 中使用,需要安装 6.x.x 版本\n\n在使用 testing library 处理组件,它会返回一些选择器,让你根据不同的方式获取组件中的 DOM 元素,\n所以在用 testing library 测试的时候,可能会需要确认某个 DOM 是否被正确的渲染出来,但 jest 本身\n并没有提供这些断言的方法,所以才需要[jest-dom](https://github.com/testing-library/jest-dom#readme)来扩充对 DOM 的断言方式\n\n```sh\nyarn add jest @testing-library/vue@next babel-jest @babel/core @babel/preset-env -D\n```\n\n3. babel 配置\n\n```js\nmodule.exports = {\n    presets: [\n        [\n            '@babel/preset-env',\n            {\n                targets: {\n                    node: 'current'\n                }\n            }\n        ]\n    ]\n};\n```\n\n4. jest 配置\n\ntransform 配置中添加了针对不同文件的转换规则,如果需要测试的文件\n不是 Vue3 和 js 则需要安装对应的插件并修改 transform 配置,例如如果使用\nVue2 的话可以安装@vue/vue2-jest,使用 ts 话则可以安装 ts-jest\n\n```js\nmodule.exports = {\n    testEnvironment: 'jsdom',\n    transform: {\n        '^.+\\\\.vue$': '@vue/vue3-jest',\n        '^.+\\\\js$': 'babel-jest'\n    },\n    testRegex: '(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.js$',\n    moduleFileExtensions: ['vue', 'js'],\n    transformIgnorePatterns: ['/node_modules/(?!testing-library)']\n};\n```\n\n5. 修改 package.json,添加测试命令\n\n```json\n  \"scripts\": {\n    \"test\": \"jest\"\n  },\n```\n\n## 简单的测试\n\n```js\nimport '@testing-library/jest-dom';\nimport { render } from '@testing-library/vue';\nimport HelloWorld from './HelloWorld.vue';\n\ndescribe('HelloWorld.vue', () => {\n    it('renders props.msg when passed', () => {\n        const msg = 'new message';\n        const { getByText } = render(HelloWorld, {\n            props: { msg }\n        });\n        expect(getByText(msg)).toBeInTheDocument();\n    });\n});\n```\n\n1. 在需要测试的组件的同级目录下创建同名测试文件,例如上述针对 HelloWorld 的组件需要创建 HelloWorld.spec.js 文件\n2. 在测试文件中引入 jest-dom 来扩充 jest 的断言方法\n3. 上面的测试用例是用来测试组件是否正确地渲染,所以需要从 DOM 中获取渲染的内容,render 方法用来渲染组件,而 getByText\n   会试着去获取内容为 msg 的 DOM,并交给 jest 的 expect 方式,最后用 jest-dom 扩充的 toBeInTheDocument 去验证,看 getByText 有没有\n   找到 DOM,如果有的话就代表 HelloWorld 通过了测试\n\n```js\nimport '@testing-library/jest-dom';\nimport { render, fireEvent } from '@testing-library/vue';\nimport Counter from './Counter.vue';\n\ndescribe('increments value on click', () => {\n    it('click twice', async () => {\n        const { getByText } = render(Counter);\n\n        getByText('Times clicked: 0');\n\n        const button = getByText('increment');\n\n        await fireEvent.click(button);\n        await fireEvent.click(button);\n\n        expect(getByText('Times clicked: 2')).toBeInTheDocument();\n    });\n});\n```\n\n有时,我们也想看一下带有交互事件的组件是否能正常工作,这个时候就需要用到 fireEvent 函数了.\nfireEvent 用来模拟用户交互行为.在上面 Counter 测试中,用户点击两次后查看 DOM 中是否有含有\n特定字符串的节点.\n\n","tags":["Vue.js"]},{"title":"winget 使用","url":"/2021/09/07/2021-09-07/","content":"\n## 什么是 winget\n\n```\n用户可以在 Windows 10 和 Windows 11 计算机上使用 winget 命令行工具来发现、安装、升级、删除和配置应用程序。 此工具是 Windows 程序包管理器服务的客户端接口。\n```\n\nwindows 下的包管理工具,类似于 Ubuntu 下的 apt.windows 上之前也有一些其他的包管理工具,像 Chocolatey Scoop. winget 是微软为 win10 开发的一款开源的软件包管理器,至少\n需要 windows 10 1709(版本 16299)及以上版本\n\n## 为什么要用包管理器\n\n-   降低安装维护软件的成本\n-   避免安装大量软件造成的路径污染\n-   不必查找和安装软件的其他依赖项\n-   避免捆绑和垃圾软件\n-   彻底地卸载\n\n## 安装\n\n打开 Microsoft Store,更新\"应用安装程式\"即可,安装完成后,打开 CMD 或者 powershell,输入 winget 查看命令\n\n![](/img/1644201744305.png)\n\n## 常用命令\n\nwinget 提供了常用的命令,如果不清楚的话,可以使用 winget [<命令>] -?查看帮助文档\n\n-   install 安装给定的程序包\n-   show 显示包的相关信息\n-   source 管理程序包的来源\n-   search 查找并显示程序包的基本信息\n-   list 显示已安装的程序包\n-   upgrade 升级给定的程序包\n-   uninstall 卸载给定的程序包\n-   hash 哈希安装程序的帮助程序\n-   validate 验证清单文件\n-   settings 打开设置或设置管理员设置\n-   features 显示实验性功能的状态\n-   export 导出已安装程序包的列表\n-   import 安装文件中的所有程序包\n\n有了 winget 之后,便不用从官网下载软件包,双击安装软件了.结合 powershell 可以实现一定程度的自动化操作\n\n```ps1\n(\n\t\"Google.Chrome\",\n    \"Mozilla.Firefox\",\n    \"Discord.Discord\",\n    \"Microsoft.WindowsTerminal\",\n    \"CPUID.CPU-Z\",\n    \"hiyohiyo.CrystalDiskInfo\",\n    \"Git.Git\",\n    \"Microsoft.PowerToys\",\n    \"Valve.Steam\",\n    \"Spotify.Spotify\",\n    \"Microsoft.Teams\",\n    \"Ubisoft.Uplay\",\n    \"Microsoft.VisualStudioCode\",\n    \"WiresharkFoundation.Wireshark\"\n) | foreach {winget install -e --id $_}\n```\n\n或者也可以使用 winget 自带的 import/export 命令,在一台已经装好软件的电脑上使用 export 命令,在另一台电脑上使用 import 命令,\n便可以克隆一台电脑的软件环境\n\n","tags":["工具"]},{"title":"使用 JSDoc 获得更好的类型提示","url":"/2021/07/06/2021-07-06/","content":"\n\nJSDoc 是适用于 JavaScript 的 API 文档生成工具,可以识别特定的标记语法编写的注释来生成可读性较好的文档\n\n![](/img/1644201796767.png)\n\n## VS Code 对 JSDoc 的支持\n\nVS Code 能够理解大部分的 JSDoc 注释并且能够根据这些注释提供智能补全的功能。你甚至可以利用 JSDoc 提供的类型信息对你的 JS 进行类型检查\n![](/img/1644201816782.png)\n\n## JSDoc 使用\n\n1. @type\n   使用@type 标签来引用一个类型名(原始类型/TypeScript 中定义的类型/或者\"@typedef\"标签)\n\n    ```js\n    /**\n     * @type {string | number} 联合类型\n     */\n    var s;\n\n    /** @type {Window} dom提供的类型 */\n    var win;\n\n    /** @type {Array<number>} 数组*/\n    var nums;\n\n    /** @type {{ a: string, b: number }} 复杂类型 */\n    var var9;\n    ```\n\n2. @param @returns\n\n    @param 使用和@type 相同的语法,但是需要添加参数名。将参数声明在中括号中可以使参数作为可选参数。使用@returns 来声明函数返回的类型\n\n    ```js\n    // 参数可以用多种语法来声明\n    /**\n     * @param {string}  p1 - 字符串参数\n     * @param {string=} p2 - 可选参数(Closure syntax)\n     * @param {string} [p3] - 另一个可选参数 (JSDoc syntax).\n     * @param {string} [p4=\"test\"] - 有默认值的可选参数\n     * @return {string} 返回值\n     */\n    function stringsStringStrings(p1, p2, p3, p4) {\n        return 'string';\n    }\n    ```\n\n3. @typedef @callback @param\n   @typedef 可以用来定义更复杂的类型。语法和@param 类似\n\n    ```js\n    /**\n     * @typedef {object} SpecialType1 - 创建新的类型并命名为 'SpecialType'\n     * @property {string} prop1 - SpecialType的字符串属性\n     * @property {number} prop2 - SpecialType的数字属性\n     * @property {number=} prop3 - SpecialType的可选数字属性\n     */\n\n    /** @type {SpecialType1} */\n    var specialTypeObject1;\n    ```\n\n    @param 可以使用类似的语法来定义一次性使用的类型。与@typedef 不同的是嵌套属性名必须以参数名作为前缀\n\n    ```js\n    /**\n     * @param {Object} options - The shape is the same as SpecialType above\n     * @param {string} options.prop1\n     * @param {number} options.prop2\n     * @param {number=} options.prop3\n     * @param {number} [options.prop4]\n     * @param {number} [options.prop5=42]\n     */\n    function special(options) {\n        return (options.prop4 || 1001) + options.prop5;\n    }\n    ```\n\n    @callback 和@typedef 类似,但是它是定义函数类型而不是对象类型\n\n    ```js\n    /**\n     * @callback Predicate\n     * @param {string} data\n     * @param {number} [index]\n     * @returns {boolean}\n     */\n\n    /** @type {Predicate} */\n    const ok = (s) => !(s.length % 2);\n    ```\n\n    当然,这些类型都可以在单行@typedef 中使用 TypeScript 语法来声明\n\n    ```js\n    /** @typedef {{ prop1: string, prop2: string, prop3?: number }} SpecialType */\n    /** @typedef {(data: string, index?: number) => boolean} Predicate */\n    ```\n\n4. @ts-check\n\n    说到底,JSDoc 只是更友好的类型提示工具，并不会对类型进行检查。VS Code 针对 TS 有类型检查,但是这对 JS 文件默认是不启用的。可以在 JS 文件第一行添加//@ts-check 开启类型错误提示\n  ![](/img/1644201840858.png)\n\n## 参考\n\n-   [JSDoc 官网](https://jsdoc.app/)\n-   [VS Code 对 JSDoc 的支持](https://code.visualstudio.com/docs/languages/javascript#_jsdoc-support)\n-   [TypeScript 官网的 JSDoc 支持文档](https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html)\n\n","tags":["VSCode","JavaScript"]},{"title":"基于Vue3+elementUI的中后台CRUD组件","url":"/2021/04/03/2021-04-03/","content":"\n## Vue restful admin\n\n### 根据 restful 接口快速创建 CRUD 界面\n\n> restful 接口根据不同的请求方式可以快速完成资源的增删查改,\n> 而对于前端来说意味着只需要为组件提供一个 url 属性便可以完成\n> 所有的操作.\n\n> 在此项目中，参考了[react-admin](https://github.com/marmelab/react-admin)的中的 data-provider\n> 的设计思路，将 restful 请求接口写成单独的函数，这样便可以定义自己的请求接口\n\n1.  定义 dataServer\n\n        dataServer 中定义了五种基本操作\n\n    ```js\n    const dataServer = (url) => ({\n      getAll: () => {\n        return [];\n      },\n      get: (id) => {},\n      create: (data) => {},\n      update: (data) => {},\n      delete: (id) => {},\n    });\n    ```\n\n2.  通过编写类似 schema 的方式来定义表格和编辑表单\n\n    ```js\n    columns: [\n      { prop: \"author\", label: \"姓名\", type: \"input\" },\n      { prop: \"title\", label: \"标题\", type: \"input\" },\n      {\n        prop: \"create_at\",\n        label: \"创建时间\",\n        type: \"time\",\n        format: \"YYYY-MM-DD HH:mm\",\n      },\n      {\n        prop: \"gender\",\n        label: \"性别\",\n        type: \"select\",\n        options: [\n          { label: \"男\", value: 1 },\n          { label: \"女\", value: 2 },\n        ],\n      },\n    ];\n    ```\n\n3.  效果图\n\n    ![table.PNG](https://i.loli.net/2021/04/30/mVlHncrkIeWvtg6.png)\n    ![edit.PNG](https://i.loli.net/2021/04/30/v68rOZbX7uF3EPH.png)","tags":["Vue.js","Element Plus"]},{"title":"艾宾浩斯复习法生成课文播放列表","url":"/2021/03/28/2021-03-28/","content":"\n## 开发原因\n\n> 以前学习英语的时候,还是在记事本上利用艾宾浩斯曲线的方法,画出表格,记录每天的学习状态.\n> 现在要学习日语,也想着用一样的方法,但是手写的不方便管理,而且效率也不高,就想着用程序\n> 来生成每天要复习的课文.参考了[这个](https://github.com/Nancyberry/ebbinghausGenerator).\n\n## 开发过程\n\n> 想法是 lessons 目录存放要学习的课文音频文件,默认是从明天开始算,一天学习一课.然后输入\n> mp3 播放列表文件.一开始还在手机上试了很多不同播放器,发现只有[poweramp](https://powerampapp.com/)满足批量导入列表的要求.","tags":["Python"]},{"title":"赚钱","url":"/2020/12/12/2020-12-12/","content":"\n> 赚钱的方法分为在刑法里面的和不在刑法里面。作为一位遵纪守法的公民，当然只关注合法的方法。\n\n### 低风险低收益\n\n低风险低收益突出一个稳定，大部分其实都是体力劳动\n\n1. 打工\n2. 捡废品\n3. 热门游戏代肝/代练\n\n### 高风险高收益\n1. 炒股\n2. 比特币/以太坊\n\n### 低风险高收益\n\n低风险高收益的方法其实就是读概率，看脸\n\n1. 彩票\n\n<!-- more -->","tags":["思考"]},{"title":"vim快捷键学习","url":"/2020/08/24/2020-08-24/","content":"\n## 简介\n> 2020年，打算学点不一样的东西。在过去的这几个月中，我把自己的输入法无论是手机端的还是PC端\n> 的，全部换成了小鹤双拼输入法。刚开始的时候的确是有点不适应。在强迫自己学习了几个月之后，\n> 打字速度终于赶上了之前使用全拼时候的速度，虽然错误率还是有点高。\n\n\n> 之前在开发上，由于自己接触的第一款代码编辑器是VSC，自然而然的，最熟悉的快捷键模式也是VCS\n> 的那一套，导致之后在使用JetBrain的IDE时，也习惯使用插件将IDE的快捷键模式改为VSC的。但是\n> JetBrain的插件并没有VSC里面的那一套那么方便。于是便将快捷键换成了Vim的那一套。之所以换成\n> Vim的，是因为之前也尝试过学习Vim，但是总是中途放弃，虽然还有一点印象。另一点是VSC也有比较\n> 成熟的Vim插件，可以一并也将VSC的快捷键换成Vim的。\n\n## 学习过程\n### 已有的快捷键迁移\n> 首先要做的是将自己已经熟悉的VSC快捷键迁移到Vim。在使用VSC的nvim插件时。 \n\n    在使用VSC的nvim插件时，不要使用太复杂的配置，不然VSC无法nvim插件无法正常运行\n\n1. 向上插入一行/向下插入一行\n```\nvim模式: normal\n\nCmd+Enter -> o\nCtrl+Enter -> O\n\nCmd+shift+Enter -> O\nCtrl+shift+Enter-> O\n```\n2. 单词移动\n```\nvim模式: normal\n\nCtrl+Right -> w\nCtrl+Left -> b\nOption+Right -> w\nOption+Left -> b\n```\n3. 删除整行\n```\nvim模式: normal\n\nShiftCmd+K -> dd\nShift+Ctrl+K -> dd\n```\n4. 在同一单词上移动\n```\nvim模式: normal\n\nCmd+d -> #/*\nCtrl+d -> #/*\n```\n### 新快捷键\n1. 在行尾编辑\n```\nvim模式: normal\n\nshitf+a\n```\n2. 删除单词\n```\nvim模式: normal\n\ndw\n```\n3. 删除括号(包括括号/不包括括号)内的内容(c表示进入insert模式)\n```\nvim模式: normal\n\nda(  ca(\ndi(  ci(\n```\n4. 改变大小写\n```\nvim模式: normal\n\n~\n```\n5. 数字自增/自减\n```\nctrl+a\nctrl+x\n```\n\n## Vim教程\n[简明Vim练级攻略](https://coolshell.cn/articles/5426.html)","tags":["VSCode","Vim"]},{"title":"消费跟踪工具","url":"/2020/03/04/2020-03-04/","content":"\n## 简介\n>第一次尝试做全栈应用。这个网站之前只是静态服务器,这次的这个消费跟踪工具使用node.js+mongo db作为后端，\n>开发过程中接口调试工具使用的postman，不过后来发现vscode有个Restful的插件，使用了一段>时间感觉还不错。 \n>对于这种个人全栈应用来说，频繁地在ide和postman之间切换还是有点麻烦的的。如果接口调试也可以在ide中的话\n>就太方便了吗，我想这也是REST Client这个插件的作者的初衷吧。顺便还学习了一下nginx的端口代理功能，非常\n>方便， 可以使用webhook的方式来触发telegram的机器人请求\n\n## 功能实现\n> 前端功能包括账单统计，消费记录添加/删除。其中账单统计包括支出统计以及收入统计。前端选用的Vue.js+Vuex\n> 后端功能主要就是账单的添加和删除。后端使用的主要就是Express+Mongoose\n\n\n![expense-tracker.png](https://i.loli.net/2020/03/04/c1xp6zGKv9eVr8N.png)","tags":["Vue.js","Mongodb","Express"]},{"title":"vscode常用快捷键","url":"/2020/02/07/2020-02-07/","content":"\n## 简介\n>vscode作为一个前端开发工具来说是非常方便的。作为巨硬的开源代码编辑器，不仅\n>有着众多的用户，还有着活跃的社区，这给vscode带来了数不胜数的插件。使用\n>插件辅助开发的同时，不要忘了vscode本身也是一款拥有许多快捷键的高效工具。\n>我把常用的快捷键概括了一下，记下的同时也方便自己以后查阅。窗口相关的大部分\n>快捷键与chrome一样，vscode平常使用习惯了，chrome的使用也变得更高效了🙃\n\n## 文件相关\n1. 打开文件\n```\nCmd+O\nCtrl+O\n```\n2. 快速打开文件\n```\nCmd+P\nCtrl+P\n```\n3. 新建文件\n```\nCmd+N\nCtrl+N\n```\n\n## 窗口界面相关\n1. 关闭窗口\n```\nCmd+W \nCtrl+W\n```\n2. 撤销窗口关闭\n```\nShift+Cmd+T\nShift+Ctrl+T\n```\n3. 终端开关\n```\nCtrl+`\nCtrl+`\n```\n4. 侧边栏开关\n```\nCmd+B \nCtrl+B\n```\n5. 面板开关\n```\nShift+Cmd+P\nShift+Ctrl+P\n```\n\n## 代码编辑相关\n1. 选中单词\n```\nCmd+D\nCtrl+D\n```\n2. 向下/上复制一行\n```\nShift+Option+Up\nShift+Option+Down\nShift+Alt+Up\nShift+Alt+Down\n```\n3. 删除整行\n```\nShiftCmd+K\nShift+Ctrl+K\n```\n4. 行尾/行首移动\n```\nCmd+Right\nCmd+Left\nCtrl+Right\nCtrl+Left\nhome\nend\n```\n5. 以空格为分隔的光标移动\n```\nOption+Right\nOption+Left\nAlt+Right\nAlt+Left\n```\n6. 在下一行插入\n```\nCmd+Enter \nCtrl+Enter\n```\n7. 连续选中单词\n```\nShift+Option+left/right\nShift+Alt+left/right\n```","tags":["VSCode"]},{"title":"chrome倍速播放插件","url":"/2020/01/06/2020-01-06/","content":"\n## 目的\n- 学会阅读文档\n- 回顾h5多媒体标签\n- 利用chrome插件完成平常的重复性工作","tags":["HTML5","FE"]},{"title":"HTML5播放器","url":"/2019/09/06/2019-09-06/","content":"\n## 目的\n- 学习HTML5中有关`<video>`的一些基本知识\n- 学会如何自定义自己的前端播放器\n- 了解一些利用js控制视频控件的一些方法\n\n![video_player](https://i.loli.net/2019/08/25/krtm6NxUKIVhpuF.jpg)","tags":["HTML5","FE"]},{"title":"豆瓣科幻电影分析","url":"/2019/08/29/2019-08-29/","content":"\n\n## 简介\n\n> 因为对科幻电影感兴趣，所以就利用 node.js 爬取了\n> 豆瓣所有高于 6 分的科幻电影，一共 859 部电影，并作\n> 了简易的分析，包括年份分布，分数分布以及均分。虽然\n> 爬取的都是均分高于 6 的电影，均分不一定很具有代表性，\n> 但也能在一定程度上反应最近几年电影的走势\n\n## 评分分布\n\n> 评分可以反映出大众对一部电影的整体印象，可以更直观\n> 的反映出普通观众对于一部电影的态度，也是我们选择电\n> 影的一种依赖标准。虽然只是对 6.0 分以上的电影做了统\n> 计，但是 6.0 分应该是能驱使大众去电影院观看的最低标\n> 准了。评分分布整体满足正态分布，说明极其优秀的电影\n> 永远是少数。\n\n![rate_dis.jpg](https://i.loli.net/2019/10/08/nYgUSDVaxHBuqJt.jpg)\n\n## 按年分布\n\n> 每一年的电影数量也是一个比较好的反映电影市场的数据，\n> 一般来说当年的电影数量越多，就越能证明电影市场的活跃\n> 和观众对于电影的喜爱\n\n![years_dis.jpg](https://i.loli.net/2019/10/08/yI6XAi5rTbUwW7h.jpg)\n\n## 其他\n\n> 还有一些其他的数据比如各国科幻电影统计以及年平均分分布，可以在[这里](https://cangzhijie356.tk/src/douban/index.html)看到\n","tags":["HTML5","FE","Node.js","爬虫"]},{"title":"基于electron的番茄计时器","url":"/2019/08/01/2019-08-01/","content":"\n\n## 主要功能\n1. 给任务设定时间，分为5,15,25三档\n2. 自定义任务时间\n3. 桌面离线运行\n\n![project_timer.jpg](https://i.loli.net/2019/10/08/wVpYcqdKl4Q1EhM.jpg)\n\n    上图就是利用electron对项目进行打包后运行的情况。electron可以方便快速的对\n    React项目进行打包。","tags":["HTML5","FE"]},{"title":"带计时功能的todo程序","url":"/2019/06/23/2019-06-23/","content":"\n\n## 实现功能\n- 添加、标记、删除待办事项\n- 为待办事项添加计时选项，方便自己查看进行多长时间任务","tags":["HTML5","FE"]}]